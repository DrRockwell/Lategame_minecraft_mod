package com.togl.rots.mixin;

import net.minecraft.world.InteractionHand;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.item.PrimedTnt;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import java.util.Objects;
import java.util.Optional;

@Mixin(LivingEntity.class)
public abstract class LivingEntityMixin  extends Entity {


    @Shadow
    public native ItemStack getItemInHand(InteractionHand hand_1);

    @Shadow
    public native boolean hasEffect(MobEffect effect);

    @Shadow
    public native void setHealth(float health);

    @Shadow
    public native boolean removeAllEffects();
    }


    @Inject(at = @At("HEAD"), method = "checkTotemDeathProtection", cancellable = true)
    public void useExampleTotem(DamageSource damageSource_1, CallbackInfoReturnable<Boolean> callback) {
        /*inits PlayerEntity entity, which is a copy of this casted to Living Entity and then PlayerEntity*/
        Entity entity = this;



        /*ItemStack object that is set to the offhand item that entity is carrying*/
        ItemStack offhand_stack = ((LivingEntityMixin) entity).getItemInHand(InteractionHand.OFF_HAND);

        ItemStack mainhand_stack = ((LivingEntityMixin) entity).getItemInHand(InteractionHand.MAIN_HAND);

        //Executes if the item in offhand_stack is equal to the explosive totem of Undying
        if ((offhand_stack.getItem() == ItemInit.METEORITE_INGOT.get()) || (mainhand_stack.getItem() == ItemInit.METEORITE_INGOT.get())) {

            /*If the damagesource is something that could kill a player in creative mode, the totem does not work*/
            if (damageSource_1.type().equals(DamageTypes.FELL_OUT_OF_WORLD)) {

                callback.setReturnValue(false);
            } else {
                /*sets copy to offhand_stack*/
                /*deletes explosive totem from offhand*/

                if ((offhand_stack.getItem() == ItemInit.METEORITE_INGOT.get())) {
                    offhand_stack.shrink(1);
                } else if ((mainhand_stack.getItem() == ItemInit.METEORITE_INGOT.get())) {

                    mainhand_stack.shrink(1);

                }



                /*totem saves player from an untimely death*/
                this.setHealth(1.0F);
                this.removeAllEffects();
                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 125, 2));
                this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 350, 4));
                this.addEffect(new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE, 100, 2));
                this.level().broadcastEntityEvent(this, (byte) 35);

                /*Spawns a tntEntity on the player upon use of Explosive Totem*/

                PrimedTnt tntEntity = EntityType.TNT.create(level());
                tntEntity.setFuse(5);
                tntEntity.moveTo(this.getX(), this.getY(), this.getZ(), 0, 0);
                level().addFreshEntity(tntEntity);

                callback.setReturnValue(true);


            }

        }


    }

}
